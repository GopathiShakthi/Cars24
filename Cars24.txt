import java.util.*;
class CarInfo {
    private String carId;
    private String carName;
    private String carType;
    private String city;
    public CarInfo(String carId, String carName, String carType, String city) {
        this.carId = Objects.requireNonNull(carId, "Car ID cannot be null");
        this.carName = Objects.requireNonNull(carName, "Car Name cannot be null");
        this.carType = Objects.requireNonNull(carType, "Car Type cannot be null");
        this.city = Objects.requireNonNull(city, "City cannot be null");
    }
    public String getCarId() {
        return carId;
    }
    public String getCarName() {
        return carName;
    }
    public String getCarType() {
        return carType;
    }
    public String getCity() {
        return city;
    }
    public void setCarId(String carId) {
        this.carId = Objects.requireNonNull(carId, "Car ID cannot be null");
    }
    public void setCarName(String carName) {
        this.carName = Objects.requireNonNull(carName, "Car Name cannot be null");
    }
    public void setCarType(String carType) {
        this.carType = Objects.requireNonNull(carType, "Car Type cannot be null");
    }
    public void setCity(String city) {
        this.city = Objects.requireNonNull(city, "City cannot be null");
    }
    public String checkAvailability() {
        String lowerCarName = this.carName.toLowerCase();
        String lowerCarType = this.carType.toLowerCase();
        String lowerCity = this.city.toLowerCase();
        String normalizedLowerCity = lowerCity.replace(" ", "");
        if (!("nissan".equals(lowerCarName) || "ford".equals(lowerCarName))) {
            return "Not Available";
        }
        if (!("sedan".equals(lowerCarType) || "suv".equals(lowerCarType) || "muv".equals(lowerCarType))) {
            return "Not Available";
        }
        if (!("newyork".equals(normalizedLowerCity) || "denver".equals(normalizedLowerCity) || "losangels".equals(normalizedLowerCity))) {
            return "Not Available";
        }
        String availableCar = null;
        double carPrice = 0.0;
        if ("nissan".equals(lowerCarName)) {
            switch (lowerCarType) {
                case "sedan":
                    availableCar = "Kicks";
                    carPrice = 8400.0;
                    break;
                case "suv":
                    availableCar = "Magnite";
                    carPrice = 10800.0;
                    break;
                case "muv":
                    availableCar = "Terrano";
                    carPrice = 14400.0;
                    break;
            }
        } else if ("ford".equals(lowerCarName)) {
            switch (lowerCarType) {
                case "sedan":
                    availableCar = "Figo";
                    carPrice = 4802.0;
                    break;
                case "suv":
                    availableCar = "Eco Sport";
                    carPrice = 9605.0;
                    break;
                case "muv":
                    availableCar = "Endeavour";
                    carPrice = 21600.0;
                    break;
            }
        }
        if (availableCar == null) {
            return "Not Available";
        }

        return availableCar + " and $" + String.format("%.1f", carPrice);
    }
}
public class Main { 
    public static CarInfo extractDetails(String carDetails) {
        if (carDetails == null || carDetails.trim().isEmpty()) {
            throw new IllegalArgumentException("Car details string cannot be null or empty.");
        }

        String[] parts = carDetails.split(":");
   if (parts.length != 4) {
            throw new IllegalArgumentException("Invalid car details format. Expected: carId:carName:carType:city");
        }
        String carId = parts[0].trim();
        String carName = parts[1].trim();
        String carType = parts[2].trim();
        String city = parts[3].trim();
        return new CarInfo(carId, carName, carType, city);
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.println("Enter the Car Details");
            System.out.print("> ");
            String inputCarDetails = scanner.nextLine();
            CarInfo car = extractDetails(inputCarDetails);
            String availabilityResult = car.checkAvailability();
            if ("Not Available".equals(availabilityResult)) {
                System.out.println("Invalid details");
            } else {
                System.out.println("Car Id : " + car.getCarId());
                System.out.println("Car Name : " + car.getCarName());
                System.out.println("Car Type : " + car.getCarType());
                System.out.println("City : " + car.getCity());
                System.out.println("Available car and price is:" + availabilityResult);
            }

        } catch (IllegalArgumentException e) {
            System.out.println("Invalid details");
        } catch (Exception e) {
            System.out.println("Invalid details");
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }
}